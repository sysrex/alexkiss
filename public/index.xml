<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Kiss</title>
    <link>https://alexkiss.dev/</link>
    <description>Recent content on Alex Kiss</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Nov 2019 14:16:40 +0100</lastBuildDate>
    
	<atom:link href="https://alexkiss.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform with Remote S3 and Locking state</title>
      <link>https://alexkiss.dev/posts/terraform-remote-s3/</link>
      <pubDate>Mon, 04 Nov 2019 14:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/terraform-remote-s3/</guid>
      <description>Terraform with AWS and remote state bucket</description>
    </item>
    
    <item>
      <title>Gopherotti avatar</title>
      <link>https://alexkiss.dev/posts/welcome-gopherotti/</link>
      <pubDate>Thu, 24 Oct 2019 14:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/welcome-gopherotti/</guid>
      <description>PResenting my new gopherotti avatar</description>
    </item>
    
    <item>
      <title>Go variables</title>
      <link>https://alexkiss.dev/posts/go-variables/</link>
      <pubDate>Wed, 16 Oct 2019 14:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/go-variables/</guid>
      <description>Just a small overview of the go variables</description>
    </item>
    
    <item>
      <title>Create EKS Cluster with Role Assumption</title>
      <link>https://alexkiss.dev/posts/create-eks-cluster-with-assume-role/</link>
      <pubDate>Fri, 02 Aug 2019 14:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/create-eks-cluster-with-assume-role/</guid>
      <description>How to create an EKS Cluster with role assumption</description>
    </item>
    
    <item>
      <title>Deploy Hugo with Travis on a VPS</title>
      <link>https://alexkiss.dev/posts/deploy-hugo-travis/</link>
      <pubDate>Tue, 16 Apr 2019 14:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/deploy-hugo-travis/</guid>
      <description>How to deploy a hugo cms with travis on a vps from Github</description>
    </item>
    
    <item>
      <title>EC2 backup with lambda</title>
      <link>https://alexkiss.dev/posts/ec2backup-python-lambda/</link>
      <pubDate>Thu, 11 Apr 2019 19:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/ec2backup-python-lambda/</guid>
      <description>Create ec2 backup with lambda and python functions</description>
    </item>
    
    <item>
      <title>Build docker to ECR with travis</title>
      <link>https://alexkiss.dev/posts/build-docker-to-ecr-with-travis/</link>
      <pubDate>Thu, 07 Feb 2019 14:19:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/build-docker-to-ecr-with-travis/</guid>
      <description>How to build docker containers and deploy them to ECR with Travis CI</description>
    </item>
    
    <item>
      <title>Adding swap to ec2</title>
      <link>https://alexkiss.dev/posts/add-swap-ec2/</link>
      <pubDate>Fri, 04 Mar 2016 14:16:40 +0100</pubDate>
      
      <guid>https://alexkiss.dev/posts/add-swap-ec2/</guid>
      <description>How to add swap to an EC2 instance</description>
    </item>
    
    <item>
      <title>Parse environment variables to structs in Go</title>
      <link>https://alexkiss.dev/posts/golang-env-structs/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://alexkiss.dev/posts/golang-env-structs/</guid>
      <description>In Go, it&amp;rsquo;s dead simple to get the value from an environment variable:
fmt.Println(os.Getenv(&amp;#34;HOME&amp;#34;)) But, sometimes you have default values&amp;hellip; so you would have to do something like this:
home := os.Getenv(&amp;#34;HOME&amp;#34;) if home == &amp;#34;&amp;#34; { home = &amp;#34;THE DEFAULT HOME&amp;#34; } fmt.Println(home) If you need those values in a lot of places, you would end up creating a function for each one or something like that.
I found this to be extremely boring.</description>
    </item>
    
    <item>
      <title>Deployment with Git</title>
      <link>https://alexkiss.dev/posts/deploy-with-git/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://alexkiss.dev/posts/deploy-with-git/</guid>
      <description>A Git hook allows you to execute custom scripts when an action occurs, such as when a commit or push is performed. Before I discovered git hooks, my deployment process consisted of pushing changes to my remote repository, SSH&amp;rsquo;ing into the server, navigating to the site directory, pulling the changes, and restarting the webserver. It wasn&amp;rsquo;t efficient at all and a waste of time doing that several times a day.</description>
    </item>
    
    <item>
      <title>Node.js and Nginx on Ubuntu</title>
      <link>https://alexkiss.dev/posts/nodejs-deploy-with-nginx/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://alexkiss.dev/posts/nodejs-deploy-with-nginx/</guid>
      <description>In this tutorial I will show how to install and configure Node.js and Nginx on you Ubuntu server.
Installing Dependencies The only dependency we really need is the build-essential package in order to be able to compile the Node.js source code.
# Make sure to download the latest repos. sudo apt-get update # Required to run `make` command. sudo apt-get install build-essential # If you need to use https. sudo apt-get install libssl-dev # My favorite text editor.</description>
    </item>
    
    <item>
      <title>Set up SSH keys</title>
      <link>https://alexkiss.dev/posts/set-up-ssh-keys/</link>
      <pubDate>Fri, 30 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://alexkiss.dev/posts/set-up-ssh-keys/</guid>
      <description>Having to type in a password in order to SSH into your server every single time is tedious and not the way to go. I will show you how to set up SSH keys so that you can elimate an extra step from your workflow.
Generating keys On your local maching, generate a new SSH key with the command:
# Generate new key. ssh-keygen -t rsa When asked for the file to save the key in, enter:</description>
    </item>
    
    <item>
      <title>Recent reported vulnerabilites</title>
      <link>https://alexkiss.dev/posts/vulnerabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexkiss.dev/posts/vulnerabilities/</guid>
      <description>&lt;p&gt;List of recently reported vulnerabilties. Last update can be spotted by the date.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>